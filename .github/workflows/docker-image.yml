name: DeepNote Keepalive
on:
  schedule:
    # Run every 6 minutes
    - cron: '*/6 * * * *'
  # Manual trigger option for testing
  workflow_dispatch:

jobs:
  keepalive:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Restore cookies cache
      id: cache-cookies
      uses: actions/cache/restore@v3
      with:
        path: deepnote_cookies.json
        key: deepnote-cookies-v1
        restore-keys: |
          deepnote-cookies-
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Restore pip cache
      id: cache-pip
      uses: actions/cache/restore@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Restore Playwright cache
      id: cache-playwright
      uses: actions/cache/restore@v3
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('**/playwright.version') }}
        restore-keys: |
          ${{ runner.os }}-playwright-
          
    - name: Create playwright.version file if not exists
      run: |
        if [ ! -f "playwright.version" ]; then
          playwright_version=$(pip show playwright 2>/dev/null | grep Version | cut -d ' ' -f 2 || echo "1.34.0")
          echo "$playwright_version" > playwright.version
        fi
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install from requirements.txt if it exists
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        else
          pip install playwright
        fi
        # Only install Playwright browsers if cache doesn't exist
        if [ "${{ steps.cache-playwright.outputs.cache-hit }}" != 'true' ]; then
          echo "Installing Playwright browsers..."
          python -m playwright install firefox
        else
          echo "Using cached Playwright browsers"
        fi
        
    - name: Run keepalive script
      env:
        # Credentials stored in GitHub Secrets
        GT_PW: ${{ secrets.GT_PW }}
        DEEP_URL: ${{ secrets.DEEP_URL }}
      run: |
        python main.py
        
    # 清理旧的cookies缓存条目
    - name: Cleanup old cookies cache entries
      uses: actions/github-script@v6
      if: success()  # 只有当前面的步骤成功时才运行
      with:
        script: |
          try {
            const caches = await github.rest.actions.getActionsCacheList({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            // 过滤出所有cookies相关的缓存条目
            const cookieCaches = caches.data.actions_caches.filter(cache => {
              return cache.key.startsWith('deepnote-cookies');
            });
            
            console.log(`Found ${cookieCaches.length} cookies cache entries`);
            
            // 删除所有cookies缓存条目
            for (const cache of cookieCaches) {
              console.log(`Deleting cookies cache: ${cache.key}`);
              await github.rest.actions.deleteActionsCacheById({
                owner: context.repo.owner,
                repo: context.repo.repo,
                cache_id: cache.id
              });
            }
            console.log('All old cookies caches deleted');
          } catch (error) {
            console.log(`Error cleaning up caches: ${error}`);
            // 继续执行，不要因为清理失败而中断工作流
          }
    
    # 确保cookies文件存在
    - name: Ensure cookies file exists
      run: |
        if [ ! -f "deepnote_cookies.json" ]; then
          echo "{}" > deepnote_cookies.json
          echo "Created empty cookies file"
        else
          echo "Cookies file exists"
        fi
        
    # 保存新的cookies缓存
    - name: Save cookies cache
      uses: actions/cache/save@v3
      with:
        path: deepnote_cookies.json
        key: deepnote-cookies-v1
        
    - name: Save pip cache
      uses: actions/cache/save@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        
    - name: Save Playwright cache
      uses: actions/cache/save@v3
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('**/playwright.version') }}

  cleanup-logs:
    runs-on: ubuntu-latest
    needs: keepalive
    steps:
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 1
          keep_minimum_runs: 10
