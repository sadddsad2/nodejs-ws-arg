name: DeepNote Keepalive 5分钟
on:
  workflow_dispatch:
    inputs:
      website_url:
        description: '被检查网站的URL'
        required: true
        type: string
      status_code:
        description: '从网站获取的状态码'
        required: true
        type: string
      timestamp:
        description: '检查发生时的时间戳'
        required: true
        type: string
jobs:
  keepalive:
    runs-on: ubuntu-latest
    steps:  
    - name: Check WEB_URLs Status
      id: check_url_status
      run: |
        # 检查第一个URL
        HTTP_STATUS1=$(curl -s -o /dev/null -w "%{http_code}" -L "http://12.cc55" || echo "400")
        echo "WEB_URL status code: $HTTP_STATUS1"
    
        # 检查第二个URL
        HTTP_STATUS2=$(curl -s -o /dev/null -w "%{http_code}" -L "${{ secrets.WEB_URL2 }}" || echo "400")
        echo "WEB_URL2 status code: $HTTP_STATUS2"
    
        # 判断结果
        if [ "$HTTP_STATUS1" = "200" ] && [ "$HTTP_STATUS2" = "200" ]; then
        FINAL_STATUS="200"
        else
        FINAL_STATUS="400"
        fi
    
        # 输出结果到GitHub Actions
        echo "status=$FINAL_STATUS" >> $GITHUB_OUTPUT
        echo "Final status code: $FINAL_STATUS"
        
    - name: Checkout code
      if: steps.check_url_status.outputs.status != '200'
      uses: actions/checkout@v3
      
    - name: Restore latest cookies cache
      if: steps.check_url_status.outputs.status != '200'
      id: cache-cookies-restore
      uses: actions/cache/restore@v3
      with:
        path: deepnote_cookies.json # This ensures it overwrites the local file if cache is found
        # The primary 'key' is less important here as we rely on restore-keys for "latest".
        # Using a generic key here or even one that's unlikely to match forces reliance on restore-keys.
        key: deepnote-cookies-restore-attempt-${{ runner.os }}
        restore-keys: |
          deepnote-cookies- # Cache action will find the newest cache starting with this prefix
          
    - name: Set up Python
      if: steps.check_url_status.outputs.status != '200'
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Restore pip cache
      if: steps.check_url_status.outputs.status != '200'
      id: cache-pip
      uses: actions/cache/restore@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Restore Playwright cache
      if: steps.check_url_status.outputs.status != '200'
      id: cache-playwright
      uses: actions/cache/restore@v3
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('**/playwright.version') }}
        restore-keys: |
          ${{ runner.os }}-playwright-
          
    - name: Create playwright.version file if not exists
      if: steps.check_url_status.outputs.status != '200'
      run: |
        if [ ! -f "playwright.version" ]; then
          playwright_version=$(pip show playwright 2>/dev/null | grep Version | cut -d ' ' -f 2 || echo "1.34.0")
          echo "$playwright_version" > playwright.version
        fi
        
    - name: Install dependencies
      if: steps.check_url_status.outputs.status != '200'
      run: |
        python -m pip install --upgrade pip
        # Install from requirements.txt if it exists
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        else
          pip install playwright
        fi
        # Only install Playwright browsers if cache doesn't exist
        # Check the output of the Playwright cache restore step
        if [ "${{ steps.cache-playwright.outputs.cache-hit }}" != 'true' ]; then
          echo "Installing Playwright browsers..."
          python -m playwright install firefox
        else
          echo "Using cached Playwright browsers"
        fi
        
    - name: Run Python Script on Non-200 Status
      if: steps.check_url_status.outputs.status != '200'
      env:
        GT_PW: ${{ secrets.GT_PW }}
        DEEP_URL: http://in.om
        DEEP_URL2: ${{ secrets.DEEP_URL2 }}
      run: |
        python main.py
        python main2.py
        
    - name: Get current timestamp for cookie cache key
      if: steps.check_url_status.outputs.status != '200' # Only if scripts ran
      id: timestamp_generator
      run: echo "CACHE_TIMESTAMP=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT

    - name: Save cookies cache with timestamp
      if: steps.check_url_status.outputs.status != '200' # Only if scripts ran and potentially updated cookies
      uses: actions/cache/save@v3
      with:
        path: deepnote_cookies.json
        key: deepnote-cookies-${{ steps.timestamp_generator.outputs.CACHE_TIMESTAMP }}
        
    - name: Save pip cache
      if: steps.check_url_status.outputs.status != '200' # Run if Python was set up
      uses: actions/cache/save@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        
    - name: Save Playwright cache
      if: steps.check_url_status.outputs.status != '200' # Run if Python was set up
      uses: actions/cache/save@v3
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('**/playwright.version') }}
